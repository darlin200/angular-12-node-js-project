{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\n// import { Observable } from 'rxjs/Observable';\n// import 'rxjs/add/observable/of';\n// import 'rxjs/add/operator/map';\n// import 'rxjs/add/operator/switchMap';\n// import 'rxjs/add/operator/catch';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { AuthActionTypes, LogInSuccess, LogInFailure } from './auth.actions';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthEffects {\n  constructor(actions$, authService, router) {\n    this.actions$ = actions$;\n    this.authService = authService;\n    this.router = router;\n    this.LogIn = createEffect(() => {\n      console.log('ja d log In effect');\n      return this.actions$.pipe(ofType(AuthActionTypes.LOGIN), map(action => action.payload), switchMap(payload => {\n        return this.authService.login(payload.email, payload.password).pipe(map(user => {\n          console.log('auth effects chiki puki', user);\n          return new LogInSuccess({\n            token: user.token,\n            email: payload.email\n          });\n        }), catchError(error => {\n          console.log('auth effects error');\n          console.log(error);\n          return of(new LogInFailure({\n            error: error\n          }));\n        }));\n      }));\n    });\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthenticationService), i0.ɵɵinject(i3.Router));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"names":["createEffect","ofType","catchError","map","switchMap","AuthActionTypes","LogInSuccess","LogInFailure","of","AuthEffects","constructor","actions$","authService","router","LogIn","console","log","pipe","LOGIN","action","payload","login","email","password","user","token","error","i0","ɵɵinject","i1","Actions","i2","AuthenticationService","i3","Router","factory","ɵfac"],"sources":["C:\\Documents\\GitHub\\angular-12-node-js-project\\angular-12-client\\src\\app\\state\\auth.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n// import { Observable } from 'rxjs/Observable';\r\n// import 'rxjs/add/observable/of';\r\n// import 'rxjs/add/operator/map';\r\n// import 'rxjs/add/operator/switchMap';\r\n// import 'rxjs/add/operator/catch';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport {\r\n  AuthActionTypes,\r\n  LogIn, LogInSuccess, LogInFailure\r\n} from './auth.actions';\r\nimport { AuthenticationService } from '../services/auth.service';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\n\r\nexport class AuthEffects {\r\n \r\nLogIn: Observable<any> = createEffect(() => {\r\n  console.log('ja d log In effect')\r\n  return this.actions$.pipe(\r\n  ofType(AuthActionTypes.LOGIN),\r\n  map((action: LogIn) => action.payload),\r\n  switchMap((payload: any) => {\r\n    return this.authService.login(payload.email, payload.password).pipe(\r\n      map((user: any) => {\r\n        console.log('auth effects chiki puki' , user);\r\n        return new LogInSuccess({token: user.token, email: payload.email});\r\n      }),\r\n      catchError((error: any) => {\r\n        console.log('auth effects error');\r\n        console.log(error);\r\n        return of(new LogInFailure({ error: error }));\r\n      })\r\n  )}))\r\n});\r\n  \r\n      constructor(\r\n        private actions$: Actions,\r\n        private authService: AuthenticationService,\r\n        private router: Router\r\n      ) {}\r\n}"],"mappings":"AAGA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,EAAEC,GAAG,EAAEC,SAAS,QAAa,gBAAgB;AAEhE,SACEC,eAAe,EACRC,YAAY,EAAEC,YAAY,QAC5B,gBAAgB;AAEvB,SAAqBC,EAAE,QAAQ,MAAM;;;;;AAIrC,OAAM,MAAOC,WAAW;EAqBlBC,YACUC,QAAiB,EACjBC,WAAkC,EAClCC,MAAc;IAFd,KAAAF,QAAQ,GAARA,QAAQ;IACR,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAtBtB,KAAAC,KAAK,GAAoBd,YAAY,CAAC,MAAK;MACzCe,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,OAAO,IAAI,CAACL,QAAQ,CAACM,IAAI,CACzBhB,MAAM,CAACI,eAAe,CAACa,KAAK,CAAC,EAC7Bf,GAAG,CAAEgB,MAAa,IAAKA,MAAM,CAACC,OAAO,CAAC,EACtChB,SAAS,CAAEgB,OAAY,IAAI;QACzB,OAAO,IAAI,CAACR,WAAW,CAACS,KAAK,CAACD,OAAO,CAACE,KAAK,EAAEF,OAAO,CAACG,QAAQ,CAAC,CAACN,IAAI,CACjEd,GAAG,CAAEqB,IAAS,IAAI;UAChBT,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAGQ,IAAI,CAAC;UAC7C,OAAO,IAAIlB,YAAY,CAAC;YAACmB,KAAK,EAAED,IAAI,CAACC,KAAK;YAAEH,KAAK,EAAEF,OAAO,CAACE;UAAK,CAAC,CAAC;QACpE,CAAC,CAAC,EACFpB,UAAU,CAAEwB,KAAU,IAAI;UACxBX,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACjCD,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;UAClB,OAAOlB,EAAE,CAAC,IAAID,YAAY,CAAC;YAAEmB,KAAK,EAAEA;UAAK,CAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CACL;MAAA,CAAC,CAAC,CAAC;IACN,CAAC,CAAC;EAMO;;;mBAzBIjB,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,qBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;;SAAXzB,WAAW;EAAA0B,OAAA,EAAX1B,WAAW,CAAA2B;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}