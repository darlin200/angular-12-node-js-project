{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:5000';\n    let currentUserStorage = localStorage.getItem('currentUser');\n    // if(currentUserStorage !== null) {\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(currentUserStorage || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n    // }\n  }\n\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    // post to fake back end, this url will be handled there...\n    console.log('fff');\n    return this.http.post(`${this.baseUrl}/auth/login`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return user;\n    }));\n  }\n  register(username, password) {\n    return this.http.post(`${this.baseUrl}/auth/registration`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return user;\n    }));\n  }\n  logout() {\n    // remove user from local storage to log user out\n    console.log('user', localStorage.getItem('currentUser'));\n    localStorage.removeItem('currentUser');\n    this.router.navigateByUrl('account/login');\n    this.currentUserSubject.next(null);\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","map","AuthenticationService","constructor","http","router","baseUrl","currentUserStorage","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","username","password","console","log","post","pipe","user","authdata","window","btoa","setItem","stringify","next","register","logout","removeItem","navigateByUrl","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Documents\\GitHub\\angular-12-node-js-project\\angular-12-client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { User } from '../models/user.model';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n  private currentUserSubject!: BehaviorSubject<User>;\r\n  private baseUrl = 'http://localhost:5000';\r\n  public currentUser!: Observable<User>;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    let currentUserStorage = localStorage.getItem('currentUser');\r\n    // if(currentUserStorage !== null) {\r\n    this.currentUserSubject = new BehaviorSubject<User>(\r\n      JSON.parse(currentUserStorage || '{}')\r\n    );\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n    // }\r\n  }\r\n\r\n  public get currentUserValue(): User {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(username: string, password: string) {\r\n    // post to fake back end, this url will be handled there...\r\n    console.log('fff');\r\n    return this.http\r\n      .post<any>(`${this.baseUrl}/auth/login`, { username, password })\r\n      .pipe(\r\n        map((user) => {\r\n          // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\r\n          user.authdata = window.btoa(username + ':' + password);\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n          return user;\r\n        })\r\n      );\r\n  }\r\n\r\n  register(username: string, password: string) {\r\n    return this.http\r\n      .post<any>(`${this.baseUrl}/auth/registration`, { username, password })\r\n      .pipe(\r\n        map((user) => {\r\n          // store user details and basic auth credentials in local storage to keep user logged in between page refreshes\r\n          user.authdata = window.btoa(username + ':' + password);\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n          return user;\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage to log user out\r\n    console.log('user', localStorage.getItem('currentUser'));\r\n    localStorage.removeItem('currentUser');\r\n    this.router.navigateByUrl('account/login');\r\n    this.currentUserSubject.next(null as any);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;;AAMpC,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAH5C,KAAAC,OAAO,GAAG,uBAAuB;IAIvC,IAAIC,kBAAkB,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC5D;IACA,IAAI,CAACC,kBAAkB,GAAG,IAAIV,eAAe,CAC3CW,IAAI,CAACC,KAAK,CAACL,kBAAkB,IAAI,IAAI,CAAC,CACvC;IACD,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;IACzD;EACF;;EAEA,IAAWC,gBAAgBA,CAAA;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACAC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClB,OAAO,IAAI,CAACjB,IAAI,CACbkB,IAAI,CAAM,GAAG,IAAI,CAAChB,OAAO,aAAa,EAAE;MAAEY,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAC/DI,IAAI,CACHtB,GAAG,CAAEuB,IAAI,IAAI;MACX;MACAA,IAAI,CAACC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACT,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;MACtDX,YAAY,CAACoB,OAAO,CAAC,aAAa,EAAEjB,IAAI,CAACkB,SAAS,CAACL,IAAI,CAAC,CAAC;MACzD,IAAI,CAACd,kBAAkB,CAACoB,IAAI,CAACN,IAAI,CAAC;MAClC,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAO,QAAQA,CAACb,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACf,IAAI,CACbkB,IAAI,CAAM,GAAG,IAAI,CAAChB,OAAO,oBAAoB,EAAE;MAAEY,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACtEI,IAAI,CACHtB,GAAG,CAAEuB,IAAI,IAAI;MACX;MACAA,IAAI,CAACC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACT,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;MACtDX,YAAY,CAACoB,OAAO,CAAC,aAAa,EAAEjB,IAAI,CAACkB,SAAS,CAACL,IAAI,CAAC,CAAC;MACzD,IAAI,CAACd,kBAAkB,CAACoB,IAAI,CAACN,IAAI,CAAC;MAClC,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAQ,MAAMA,CAAA;IACJ;IACAZ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEb,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACxDD,YAAY,CAACyB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAAC5B,MAAM,CAAC6B,aAAa,CAAC,eAAe,CAAC;IAC1C,IAAI,CAACxB,kBAAkB,CAACoB,IAAI,CAAC,IAAW,CAAC;EAC3C;;;mBAvDW5B,qBAAqB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAArBtC,qBAAqB;EAAAuC,OAAA,EAArBvC,qBAAqB,CAAAwC,IAAA;EAAAC,UAAA,EADR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}