{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nexport class AuthGuard {\n  constructor(router, authenticationService) {\n    this.router = router;\n    this.authenticationService = authenticationService;\n  }\n  canActivate(route, state) {\n    console.log('??');\n    const user = this.authenticationService.currentUserValue;\n    if (Object.getOwnPropertyNames(user).length > 0) {\n      // authorised so return true\n      console.log('user', user);\n      return true;\n    }\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/account/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","router","authenticationService","canActivate","route","state","console","log","user","currentUserValue","Object","getOwnPropertyNames","length","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","Router","i2","AuthenticationService","factory","ɵfac","providedIn"],"sources":["C:\\Documents\\GitHub\\angular-12-node-js-project\\angular-12-client\\src\\app\\helpers\\auth-guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\n// import { AccountService } from '../_services';\r\nimport { AuthenticationService } from '../services/auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService\r\n    ) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        console.log('??')\r\n        const user = this.authenticationService.currentUserValue;\r\n        \r\n        if ((Object.getOwnPropertyNames(user).length > 0)) {\r\n            // authorised so return true\r\n            console.log('user', user);\r\n            return true;\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url }});\r\n        return false;\r\n    }\r\n}"],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAClBC,YACYC,MAAc,EACdC,qBAA4C;IAD5C,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,qBAAqB,GAArBA,qBAAqB;EAC9B;EAEHC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACjEC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACjB,MAAMC,IAAI,GAAG,IAAI,CAACN,qBAAqB,CAACO,gBAAgB;IAExD,IAAKC,MAAM,CAACC,mBAAmB,CAACH,IAAI,CAAC,CAACI,MAAM,GAAG,CAAC,EAAG;MAC/C;MACAN,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEC,IAAI,CAAC;MACzB,OAAO,IAAI;;IAGf;IACA,IAAI,CAACP,MAAM,CAACY,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEV,KAAK,CAACW;MAAG;IAAE,CAAC,CAAC;IAClF,OAAO,KAAK;EAChB;;;mBAnBSjB,SAAS,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,qBAAA;AAAA;;SAATvB,SAAS;EAAAwB,OAAA,EAATxB,SAAS,CAAAyB,IAAA;EAAAC,UAAA,EADI;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}